{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst delete_1 = require(\"../operations/delete\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst insert_1 = require(\"../operations/insert\");\n\nconst operation_1 = require(\"../operations/operation\");\n\nconst update_1 = require(\"../operations/update\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\n\n\nconst kServerError = Symbol('serverError');\n/** @public */\n\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\n\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n\n}\n\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\n\nclass BulkWriteResult {\n  static generateIdMap(ids) {\n    const idMap = {};\n\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n\n    return idMap;\n  }\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n\n\n  constructor(bulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n\n\n  get ok() {\n    return this.result.ok;\n  }\n  /** The number of inserted documents */\n\n\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /** Number of upserted documents */\n\n\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /** Number of matched documents */\n\n\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /** Number of documents updated physically on disk */\n\n\n  get nModified() {\n    return this.result.nModified;\n  }\n  /** Number of removed documents */\n\n\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /** Returns an array of all inserted ids */\n\n\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Returns an array of all upserted ids */\n\n\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n\n\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n\n\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n\n\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n\n\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n\n\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n\n\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve the write concern error if one exists */\n\n\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg; // TODO: Something better\n\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n\n  toString() {\n    return `BulkWriteResult(${this.result})`;\n  }\n\n  isOk() {\n    return this.result.ok === 1;\n  }\n\n}\n\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\n\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n\n\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n\n\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n\n\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n\n  toJSON() {\n    return this[kServerError];\n  }\n\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n\n}\n\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\n\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n\n\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n\n\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n\n\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n\n\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n\n\n  getOperation() {\n    return this.err.op;\n  }\n\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n\n}\n\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\n\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  } // Do we have a top level error stop processing and return\n\n\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  } // If we have an insert Batch type\n\n\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  } // If we have an insert Batch type\n\n\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0; // We have an array of upserted values, we need to rewrite the indexes\n\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  } // If we have an update Batch type\n\n\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nexports.mergeBatchResults = mergeBatchResults;\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    } // Merge the results together\n\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return; // Execute the next command in line\n\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, { ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  } // Set an operationIf if provided\n\n\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  } // Is the checkKeys option disabled\n\n\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: err.result?.writeConcernError.errmsg,\n    code: err.result?.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\n\n\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n\n}\n\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\n\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n\n\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n\n\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n\n\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n\n\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n\n\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n\n\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n\n\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n\n\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n  /** Specifies hint for the bulk operation. */\n\n\n  hint(hint) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n\n}\n\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\n\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n\n}\n/** @public */\n\n\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options; // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n\n    const namespace = collection.s.namespace; // Used to mark operation as executed\n\n    const executed = false; // Current item\n\n    const currentOp = undefined; // Set max byte size\n\n    const hello = topology.lastHello(); // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000; // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2; // Final options for retryable writes\n\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db); // Final results\n\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    }; // Internal state\n\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    }; // bypass Validation\n\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    } // Save a current selector\n\n\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n\n\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne,\n          multi: false\n        });\n\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, { ...op.updateOne,\n          multi: false\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, { ...op.updateMany,\n          multi: true\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne,\n        limit: 1\n      }));\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany,\n        limit: 0\n      }));\n    } // otherwise an unknown operation was provided\n\n\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get batches() {\n    const batches = [...this.s.batches];\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n\n    return batches;\n  }\n\n  execute(options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.s.executed) {\n        throw new error_1.MongoBatchReExecutionError();\n      }\n\n      const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n      if (writeConcern) {\n        _this.s.writeConcern = writeConcern;\n      } // If we have current batch\n\n\n      if (_this.isOrdered) {\n        if (_this.s.currentBatch) _this.s.batches.push(_this.s.currentBatch);\n      } else {\n        if (_this.s.currentInsertBatch) _this.s.batches.push(_this.s.currentInsertBatch);\n        if (_this.s.currentUpdateBatch) _this.s.batches.push(_this.s.currentUpdateBatch);\n        if (_this.s.currentRemoveBatch) _this.s.batches.push(_this.s.currentRemoveBatch);\n      } // If we have no operations in the bulk raise an error\n\n\n      if (_this.s.batches.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n      }\n\n      _this.s.executed = true;\n      const finalOptions = { ..._this.s.options,\n        ...options\n      };\n      const operation = new BulkWriteShimOperation(_this, finalOptions);\n      return (0, execute_operation_1.executeOperation)(_this.s.collection.s.db.s.client, operation);\n    })();\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n\n  get() {\n    return this.s.currentIndex;\n  }\n\n});\n\nfunction shouldForceServerObjectId(bulkOperation) {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/bulk/common.js"],"names":["Object","defineProperty","exports","value","BulkOperationBase","FindOperators","MongoBulkWriteError","mergeBatchResults","WriteError","WriteConcernError","BulkWriteResult","Batch","BatchType","bson_1","require","error_1","delete_1","execute_operation_1","insert_1","operation_1","update_1","utils_1","write_concern_1","kServerError","Symbol","freeze","INSERT","UPDATE","DELETE","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","generateIdMap","ids","idMap","doc","index","_id","bulkResult","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","insertedIds","enumerable","ok","nUpserted","getInsertedIds","getUpsertedIds","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","err","code","MONGODB_ERROR_CODES","WriteConcernFailed","toString","isOk","error","errInfo","toJSON","getOperation","op","JSON","stringify","batch","writeError","message","push","isInsertBatch","n","isDeleteBatch","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoWriteConcernError","handleMongoWriteConcernError","writeResult","handleWriteError","finalOptions","resolveOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","executeOperation","collection","db","client","InsertOperation","namespace","UpdateOperation","DeleteOperation","MongoServerError","Error","assign","name","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","makeUpdateStatement","selector","updateOne","hasAtomicOperators","MongoInvalidArgumentError","replaceOne","replacement","deleteOne","makeDeleteStatement","delete","upsert","collation","arrayFilters","hint","BulkWriteShimOperation","AbstractOperation","execute","server","session","topology","getTopology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","applyRetryableWrites","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","WriteConcern","fromOptions","bsonOptions","resolveBSONOptions","insert","document","shouldForceServerObjectId","ObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","MongoBatchReExecutionError","operation","msg","prototype","get","bulkOp"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /** The number of inserted documents */\n    get nInserted() {\n        return this.result.nInserted;\n    }\n    /** Number of upserted documents */\n    get nUpserted() {\n        return this.result.nUpserted;\n    }\n    /** Number of matched documents */\n    get nMatched() {\n        return this.result.nMatched;\n    }\n    /** Number of documents updated physically on disk */\n    get nModified() {\n        return this.result.nModified;\n    }\n    /** Number of removed documents */\n    get nRemoved() {\n        return this.result.nRemoved;\n    }\n    /** Returns an array of all inserted ids */\n    getInsertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Returns an array of all upserted ids */\n    getUpsertedIds() {\n        return this.result.upserted;\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n        if (bulkOperation.handleWriteError(callback, writeResult))\n            return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites =\n                finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n        }\n    }\n    try {\n        if (isInsertBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isUpdateBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isDeleteBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n    }\n    catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /** Creates a new MongoBulkWriteError */\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    execute(server, session, callback) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommands(this.bulkOperation, this.options, callback);\n    }\n}\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        if (document._id == null && !shouldForceServerObjectId(this)) {\n            document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = shouldForceServerObjectId(this);\n            if (op.insertOne && op.insertOne.document == null) {\n                // NOTE: provided for legacy support, but this is a malformed operation\n                if (forceServerObjectId !== true && op.insertOne._id == null) {\n                    op.insertOne._id = new bson_1.ObjectId();\n                }\n                return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n            }\n            if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n                op.insertOne.document._id = new bson_1.ObjectId();\n            }\n            return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.s.currentIndex;\n    }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n    if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.options.forceServerObjectId;\n    }\n    if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n    }\n    return false;\n}\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n"]},"metadata":{},"sourceType":"script"}