{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst utils_1 = require(\"./utils\");\n\nlet AutoEncrypterClass;\n/** @internal */\n\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\n\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    } // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n\n\n    this[kInternalClient] = null;\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client, uri, options) {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n\n    if (internalClient == null) {\n      const clonedOptions = {};\n\n      for (const key of [...Object.getOwnPropertyNames(options), ...Object.getOwnPropertySymbols(options)]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n      internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient?.on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return internalClient;\n  }\n\n  connectInternalClient() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO(NODE-4144): Remove new variable for type narrowing\n      const internalClient = _this[kInternalClient];\n\n      if (_this.needsConnecting && internalClient != null) {\n        _this.needsConnecting = false;\n        yield internalClient.connect();\n      }\n    })();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n\n      if (internalClient != null && client !== internalClient) {\n        internalClient.close(force).then(() => callback(), error => callback(error));\n        return;\n      }\n\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt() {\n    const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n\n    if (mongodbClientEncryption == null) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n\n}\n\nexports.Encrypter = Encrypter;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/encrypter.js"],"names":["Object","defineProperty","exports","value","Encrypter","constants_1","require","error_1","mongo_client_1","utils_1","AutoEncrypterClass","kInternalClient","Symbol","constructor","client","uri","options","autoEncryption","MongoInvalidArgumentError","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","proxyHost","proxyOptions","proxyPort","proxyUsername","proxyPassword","autoEncrypter","internalClient","clonedOptions","key","getOwnPropertyNames","getOwnPropertySymbols","includes","Reflect","set","get","minPoolSize","MongoClient","eventName","MONGO_CLIENT_EVENTS","listener","listeners","on","connectInternalClient","connect","close","force","callback","teardown","e","then","error","checkForMongoCrypt","mongodbClientEncryption","getMongoDBClientEncryption","MongoMissingDependencyError","extension","AutoEncrypter"],"mappings":"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","sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/no-var-requires */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encrypter = void 0;\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst utils_1 = require(\"./utils\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    close(client, force, callback) {\n        this.autoEncrypter.teardown(!!force, e => {\n            const internalClient = this[kInternalClient];\n            if (internalClient != null && client !== internalClient) {\n                internalClient.close(force).then(() => callback(), error => callback(error));\n                return;\n            }\n            callback(e);\n        });\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n        if (mongodbClientEncryption == null) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n        AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n    }\n}\nexports.Encrypter = Encrypter;\n"]},"metadata":{},"sourceType":"script"}