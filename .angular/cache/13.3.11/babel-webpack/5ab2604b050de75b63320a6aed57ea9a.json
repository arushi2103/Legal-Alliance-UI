{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\n\nconst dns = require(\"dns\");\n\nconst timers_1 = require(\"timers\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\n\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n\n}\n\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\n\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  } // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n\n\n  schedule() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n    }\n\n    this._timeout = (0, timers_1.setTimeout)(() => {\n      this._poll().catch(() => null);\n    }, this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure() {\n    this.haMode = true;\n    this.schedule();\n  }\n\n  _poll() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const generation = _this.generation;\n      let srvRecords;\n\n      try {\n        srvRecords = yield dns.promises.resolveSrv(_this.srvAddress);\n      } catch (dnsError) {\n        _this.failure();\n\n        return;\n      }\n\n      if (generation !== _this.generation) {\n        return;\n      }\n\n      const finalAddresses = [];\n\n      for (const record of srvRecords) {\n        if (matchesParentDomain(record.name, _this.srvHost)) {\n          finalAddresses.push(record);\n        }\n      }\n\n      if (!finalAddresses.length) {\n        _this.failure();\n\n        return;\n      }\n\n      _this.success(finalAddresses);\n    })();\n  }\n\n}\n\nexports.SrvPoller = SrvPoller;\n/** @event */\n\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/sdam/srv_polling.js"],"names":["Object","defineProperty","exports","value","SrvPoller","SrvPollingEvent","dns","require","timers_1","error_1","mongo_types_1","utils_1","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","constructor","srvRecords","hostnames","Set","map","r","HostAddress","fromSrvRecord","toString","TypedEventEmitter","options","srvHost","MongoRuntimeError","srvMaxHosts","srvServiceName","rescanSrvIntervalMS","heartbeatFrequencyMS","haMode","generation","_timeout","undefined","intervalMS","start","schedule","stop","clearTimeout","setTimeout","_poll","catch","success","emit","SRV_RECORD_DISCOVERY","failure","promises","resolveSrv","dnsError","finalAddresses","record","name","push","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n    const regex = /^.*?\\./;\n    const srv = `.${srvAddress.replace(regex, '')}`;\n    const parent = `.${parentDomain.replace(regex, '')}`;\n    return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().catch(() => null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            if (matchesParentDomain(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\n"]},"metadata":{},"sourceType":"script"}