{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\n\nconst bson_1 = require(\"./bson\");\n\nconst ordered_1 = require(\"./bulk/ordered\");\n\nconst unordered_1 = require(\"./bulk/unordered\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\n\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst bulk_write_1 = require(\"./operations/bulk_write\");\n\nconst count_1 = require(\"./operations/count\");\n\nconst count_documents_1 = require(\"./operations/count_documents\");\n\nconst delete_1 = require(\"./operations/delete\");\n\nconst distinct_1 = require(\"./operations/distinct\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst insert_1 = require(\"./operations/insert\");\n\nconst is_capped_1 = require(\"./operations/is_capped\");\n\nconst options_operation_1 = require(\"./operations/options_operation\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst update_1 = require(\"./operations/update\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\n\n\nclass Collection {\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db, name, options) {\n    (0, utils_1.checkCollectionName)(name); // Internal state\n\n    this.s = {\n      db,\n      options,\n      namespace: new utils_1.MongoDBNamespace(db.databaseName, name),\n      pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n  }\n  /**\n   * The name of the database this collection belongs to\n   */\n\n\n  get dbName() {\n    return this.s.namespace.db;\n  }\n  /**\n   * The name of this collection\n   */\n\n\n  get collectionName() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.s.namespace.collection;\n  }\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n\n\n  get readConcern() {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n\n\n  get writeConcern() {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n\n    return this.s.writeConcern;\n  }\n  /** The current index hint for the collection */\n\n\n  get hint() {\n    return this.s.collectionHint;\n  }\n\n  set hint(v) {\n    this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n  }\n  /**\n   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param doc - The document to insert\n   * @param options - Optional settings for the command\n   */\n\n\n  insertOne(doc, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this.s.db.s.client, new insert_1.InsertOneOperation(_this, doc, (0, utils_1.resolveOptions)(_this, options)));\n    })();\n  }\n  /**\n   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   */\n\n\n  insertMany(docs, options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this2.s.db.s.client, new insert_1.InsertManyOperation(_this2, docs, (0, utils_1.resolveOptions)(_this2, options ?? {\n        ordered: true\n      })));\n    })();\n  }\n  /**\n   * Perform a bulkWrite operation without a fluent API\n   *\n   * Legal operation types are\n   * - `insertOne`\n   * - `replaceOne`\n   * - `updateOne`\n   * - `updateMany`\n   * - `deleteOne`\n   * - `deleteMany`\n   *\n   * If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param operations - Bulk operations to perform\n   * @param options - Optional settings for the command\n   * @throws MongoDriverError if operations is not an array\n   */\n\n\n  bulkWrite(operations, options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!Array.isArray(operations)) {\n        throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n      }\n\n      return (0, execute_operation_1.executeOperation)(_this3.s.db.s.client, new bulk_write_1.BulkWriteOperation(_this3, operations, (0, utils_1.resolveOptions)(_this3, options ?? {\n        ordered: true\n      })));\n    })();\n  }\n  /**\n   * Update a single document in a collection\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - The update operations to be applied to the document\n   * @param options - Optional settings for the command\n   */\n\n\n  updateOne(filter, update, options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this4.s.db.s.client, new update_1.UpdateOneOperation(_this4, filter, update, (0, utils_1.resolveOptions)(_this4, options)));\n    })();\n  }\n  /**\n   * Replace a document in a collection with another document\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   */\n\n\n  replaceOne(filter, replacement, options) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this5.s.db.s.client, new update_1.ReplaceOneOperation(_this5, filter, replacement, (0, utils_1.resolveOptions)(_this5, options)));\n    })();\n  }\n  /**\n   * Update multiple documents in a collection\n   *\n   * @param filter - The filter used to select the documents to update\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   */\n\n\n  updateMany(filter, update, options) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this6.s.db.s.client, new update_1.UpdateManyOperation(_this6, filter, update, (0, utils_1.resolveOptions)(_this6, options)));\n    })();\n  }\n  /**\n   * Delete a document from a collection\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  deleteOne(filter = {}, options = {}) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this7.s.db.s.client, new delete_1.DeleteOneOperation(_this7, filter, (0, utils_1.resolveOptions)(_this7, options)));\n    })();\n  }\n  /**\n   * Delete multiple documents from a collection\n   *\n   * @param filter - The filter used to select the documents to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  deleteMany(filter = {}, options = {}) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this8.s.db.s.client, new delete_1.DeleteManyOperation(_this8, filter, (0, utils_1.resolveOptions)(_this8, options)));\n    })();\n  }\n  /**\n   * Rename the collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the Db or MongoClient.\n   *\n   * @param newName - New name of of the collection.\n   * @param options - Optional settings for the command\n   */\n\n\n  rename(newName, options) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      // Intentionally, we do not inherit options from parent for this operation.\n      return (0, execute_operation_1.executeOperation)(_this9.s.db.s.client, new rename_1.RenameOperation(_this9, newName, { ...options,\n        readPreference: read_preference_1.ReadPreference.PRIMARY\n      }));\n    })();\n  }\n  /**\n   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  drop(options) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this10.s.db.s.client, new drop_1.DropCollectionOperation(_this10.s.db, _this10.collectionName, options));\n    })();\n  }\n\n  findOne(filter = {}, options = {}) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this11.find(filter, options).limit(-1).batchSize(1).next();\n    })();\n  }\n\n  find(filter = {}, options = {}) {\n    return new find_cursor_1.FindCursor(this.s.db.s.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Returns the options of the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  options(options) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this12.s.db.s.client, new options_operation_1.OptionsOperation(_this12, (0, utils_1.resolveOptions)(_this12, options)));\n    })();\n  }\n  /**\n   * Returns if the collection is a capped collection\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  isCapped(options) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this13.s.db.s.client, new is_capped_1.IsCappedOperation(_this13, (0, utils_1.resolveOptions)(_this13, options)));\n    })();\n  }\n  /**\n   * Creates an index on the db and collection collection.\n   *\n   * @param indexSpec - The field name or index specification to create an index for\n   * @param options - Optional settings for the command\n   *\n   * @example\n   * ```ts\n   * const collection = client.db('foo').collection('bar');\n   *\n   * await collection.createIndex({ a: 1, b: -1 });\n   *\n   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n   * await collection.createIndex([ [c, 1], [d, -1] ]);\n   *\n   * // Equivalent to { e: 1 }\n   * await collection.createIndex('e');\n   *\n   * // Equivalent to { f: 1, g: 1 }\n   * await collection.createIndex(['f', 'g'])\n   *\n   * // Equivalent to { h: 1, i: -1 }\n   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n   *\n   * // Equivalent to { j: 1, k: -1, l: 2d }\n   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n   * ```\n   */\n\n\n  createIndex(indexSpec, options) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this14.s.db.s.client, new indexes_1.CreateIndexOperation(_this14, _this14.collectionName, indexSpec, (0, utils_1.resolveOptions)(_this14, options)));\n    })();\n  }\n  /**\n   * Creates multiple indexes in the collection, this method is only supported for\n   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n   * error.\n   *\n   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n   * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n   *\n   * @param indexSpecs - An array of index specifications to be created\n   * @param options - Optional settings for the command\n   *\n   * @example\n   * ```ts\n   * const collection = client.db('foo').collection('bar');\n   * await collection.createIndexes([\n   *   // Simple index on field fizz\n   *   {\n   *     key: { fizz: 1 },\n   *   }\n   *   // wildcard index\n   *   {\n   *     key: { '$**': 1 }\n   *   },\n   *   // named index on darmok and jalad\n   *   {\n   *     key: { darmok: 1, jalad: -1 }\n   *     name: 'tanagra'\n   *   }\n   * ]);\n   * ```\n   */\n\n\n  createIndexes(indexSpecs, options) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this15.s.db.s.client, new indexes_1.CreateIndexesOperation(_this15, _this15.collectionName, indexSpecs, (0, utils_1.resolveOptions)(_this15, { ...options,\n        maxTimeMS: undefined\n      })));\n    })();\n  }\n  /**\n   * Drops an index from this collection.\n   *\n   * @param indexName - Name of the index to drop.\n   * @param options - Optional settings for the command\n   */\n\n\n  dropIndex(indexName, options) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this16.s.db.s.client, new indexes_1.DropIndexOperation(_this16, indexName, { ...(0, utils_1.resolveOptions)(_this16, options),\n        readPreference: read_preference_1.ReadPreference.primary\n      }));\n    })();\n  }\n  /**\n   * Drops all indexes from this collection.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  dropIndexes(options) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this17.s.db.s.client, new indexes_1.DropIndexesOperation(_this17, (0, utils_1.resolveOptions)(_this17, options)));\n    })();\n  }\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  listIndexes(options) {\n    return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Checks if one or more indexes exist on the collection, fails on first non-existing index\n   *\n   * @param indexes - One or more index names to check.\n   * @param options - Optional settings for the command\n   */\n\n\n  indexExists(indexes, options) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this18.s.db.s.client, new indexes_1.IndexExistsOperation(_this18, indexes, (0, utils_1.resolveOptions)(_this18, options)));\n    })();\n  }\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  indexInformation(options) {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this19.s.db.s.client, new indexes_1.IndexInformationOperation(_this19.s.db, _this19.collectionName, (0, utils_1.resolveOptions)(_this19, options)));\n    })();\n  }\n  /**\n   * Gets an estimate of the count of documents in a collection using collection metadata.\n   * This will always run a count command on all server versions.\n   *\n   * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n   * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n   * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n   * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n   * encountering errors.\n   *\n   * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n   * @param options - Optional settings for the command\n   */\n\n\n  estimatedDocumentCount(options) {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this20.s.db.s.client, new estimated_document_count_1.EstimatedDocumentCountOperation(_this20, (0, utils_1.resolveOptions)(_this20, options)));\n    })();\n  }\n  /**\n   * Gets the number of documents matching the filter.\n   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n   * the following query operators must be replaced:\n   *\n   * | Operator | Replacement |\n   * | -------- | ----------- |\n   * | `$where`   | [`$expr`][1] |\n   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n   *\n   * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n   * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n   * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n   * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   *\n   * @param filter - The filter for the count\n   * @param options - Optional settings for the command\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n   * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   */\n\n\n  countDocuments(filter = {}, options = {}) {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this21.s.db.s.client, new count_documents_1.CountDocumentsOperation(_this21, filter, (0, utils_1.resolveOptions)(_this21, options)));\n    })();\n  }\n\n  distinct(key, filter = {}, options = {}) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this22.s.db.s.client, new distinct_1.DistinctOperation(_this22, key, filter, (0, utils_1.resolveOptions)(_this22, options)));\n    })();\n  }\n  /**\n   * Retrieve all the indexes on the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  indexes(options) {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this23.s.db.s.client, new indexes_1.IndexesOperation(_this23, (0, utils_1.resolveOptions)(_this23, options)));\n    })();\n  }\n  /**\n   * Get all the collection statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  stats(options) {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this24.s.db.s.client, new stats_1.CollStatsOperation(_this24, options));\n    })();\n  }\n  /**\n   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  findOneAndDelete(filter, options) {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this25.s.db.s.client, new find_and_modify_1.FindOneAndDeleteOperation(_this25, filter, (0, utils_1.resolveOptions)(_this25, options)));\n    })();\n  }\n  /**\n   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   */\n\n\n  findOneAndReplace(filter, replacement, options) {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this26.s.db.s.client, new find_and_modify_1.FindOneAndReplaceOperation(_this26, filter, replacement, (0, utils_1.resolveOptions)(_this26, options)));\n    })();\n  }\n  /**\n   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - Update operations to be performed on the document\n   * @param options - Optional settings for the command\n   */\n\n\n  findOneAndUpdate(filter, update, options) {\n    var _this27 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this27.s.db.s.client, new find_and_modify_1.FindOneAndUpdateOperation(_this27, filter, update, (0, utils_1.resolveOptions)(_this27, options)));\n    })();\n  }\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate(pipeline = [], options) {\n    if (!Array.isArray(pipeline)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor(this.s.db.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to override the schema that may be defined for this specific collection\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   * @example\n   * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n   * ```ts\n   * collection.watch<{ _id: number }>()\n   *   .on('change', change => console.log(change._id.toFixed(4)));\n   * ```\n   *\n   * @example\n   * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n   * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n   * No need start from scratch on the ChangeStreamInsertDocument type!\n   * By using an intersection we can save time and ensure defaults remain the same type!\n   * ```ts\n   * collection\n   *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n   *     { $addFields: { comment: 'big changes' } },\n   *     { $match: { operationType: 'insert' } }\n   *   ])\n   *   .on('change', change => {\n   *     change.comment.startsWith('big');\n   *     change.operationType === 'insert';\n   *     // No need to narrow in code because the generics did that for us!\n   *     expectType<Schema>(change.fullDocument);\n   *   });\n   * ```\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TLocal - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n\n\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n\n\n  initializeUnorderedBulkOp(options) {\n    return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n   *\n   * @throws MongoNotConnectedError\n   * @remarks\n   * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n   * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n   */\n\n\n  initializeOrderedBulkOp(options) {\n    return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * An estimated count of matching documents in the db to a filter.\n   *\n   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   *\n   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n   *\n   * @param filter - The filter for the count.\n   * @param options - Optional settings for the command\n   */\n\n\n  count(filter = {}, options = {}) {\n    var _this28 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this28.s.db.s.client, new count_1.CountOperation(utils_1.MongoDBNamespace.fromString(_this28.namespace), filter, (0, utils_1.resolveOptions)(_this28, options)));\n    })();\n  }\n\n}\n\nexports.Collection = Collection;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/collection.js"],"names":["Object","defineProperty","exports","value","Collection","bson_1","require","ordered_1","unordered_1","change_stream_1","aggregation_cursor_1","find_cursor_1","list_indexes_cursor_1","error_1","bulk_write_1","count_1","count_documents_1","delete_1","distinct_1","drop_1","estimated_document_count_1","execute_operation_1","find_and_modify_1","indexes_1","insert_1","is_capped_1","options_operation_1","rename_1","stats_1","update_1","read_concern_1","read_preference_1","utils_1","write_concern_1","constructor","db","name","options","checkCollectionName","s","namespace","MongoDBNamespace","databaseName","pkFactory","DEFAULT_PK_FACTORY","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","readConcern","ReadConcern","writeConcern","WriteConcern","dbName","collectionName","collection","toString","hint","collectionHint","v","normalizeHintField","insertOne","doc","executeOperation","client","InsertOneOperation","resolveOptions","insertMany","docs","InsertManyOperation","ordered","bulkWrite","operations","Array","isArray","MongoInvalidArgumentError","BulkWriteOperation","updateOne","filter","update","UpdateOneOperation","replaceOne","replacement","ReplaceOneOperation","updateMany","UpdateManyOperation","deleteOne","DeleteOneOperation","deleteMany","DeleteManyOperation","rename","newName","RenameOperation","PRIMARY","drop","DropCollectionOperation","findOne","find","limit","batchSize","next","FindCursor","OptionsOperation","isCapped","IsCappedOperation","createIndex","indexSpec","CreateIndexOperation","createIndexes","indexSpecs","CreateIndexesOperation","maxTimeMS","undefined","dropIndex","indexName","DropIndexOperation","primary","dropIndexes","DropIndexesOperation","listIndexes","ListIndexesCursor","indexExists","indexes","IndexExistsOperation","indexInformation","IndexInformationOperation","estimatedDocumentCount","EstimatedDocumentCountOperation","countDocuments","CountDocumentsOperation","distinct","key","DistinctOperation","IndexesOperation","stats","CollStatsOperation","findOneAndDelete","FindOneAndDeleteOperation","findOneAndReplace","FindOneAndReplaceOperation","findOneAndUpdate","FindOneAndUpdateOperation","aggregate","pipeline","AggregationCursor","watch","ChangeStream","initializeUnorderedBulkOp","UnorderedBulkOperation","initializeOrderedBulkOp","OrderedBulkOperation","count","CountOperation","fromString"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collection = void 0;\nconst bson_1 = require(\"./bson\");\nconst ordered_1 = require(\"./bulk/ordered\");\nconst unordered_1 = require(\"./bulk/unordered\");\nconst change_stream_1 = require(\"./change_stream\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nconst error_1 = require(\"./error\");\nconst bulk_write_1 = require(\"./operations/bulk_write\");\nconst count_1 = require(\"./operations/count\");\nconst count_documents_1 = require(\"./operations/count_documents\");\nconst delete_1 = require(\"./operations/delete\");\nconst distinct_1 = require(\"./operations/distinct\");\nconst drop_1 = require(\"./operations/drop\");\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst insert_1 = require(\"./operations/insert\");\nconst is_capped_1 = require(\"./operations/is_capped\");\nconst options_operation_1 = require(\"./operations/options_operation\");\nconst rename_1 = require(\"./operations/rename\");\nconst stats_1 = require(\"./operations/stats\");\nconst update_1 = require(\"./operations/update\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        (0, utils_1.checkCollectionName)(name);\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The update operations to be applied to the document\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new update_1.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new update_1.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * @param filter - The filter used to select the documents to update\n     * @param update - The update operations to be applied to the documents\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new update_1.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        return this.find(filter, options).limit(-1).batchSize(1).next();\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.s.db.s.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.DropIndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new stats_1.CollStatsOperation(this, options));\n    }\n    /**\n     * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - Update operations to be performed on the document\n     * @param options - Optional settings for the command\n     */\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.s.db.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new count_1.CountOperation(utils_1.MongoDBNamespace.fromString(this.namespace), filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n}\nexports.Collection = Collection;\n"]},"metadata":{},"sourceType":"script"}