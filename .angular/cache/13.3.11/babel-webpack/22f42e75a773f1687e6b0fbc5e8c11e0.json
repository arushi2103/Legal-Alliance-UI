{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nclass MongoCR extends auth_provider_1.AuthProvider {\n  auth(authContext) {\n    return _asyncToGenerator(function* () {\n      const {\n        connection,\n        credentials\n      } = authContext;\n\n      if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n      }\n\n      const {\n        username,\n        password,\n        source\n      } = credentials;\n      const {\n        nonce\n      } = yield connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), {\n        getnonce: 1\n      }, undefined);\n      const hashPassword = crypto.createHash('md5').update(`${username}:mongo:${password}`, 'utf8').digest('hex'); // Final key\n\n      const key = crypto.createHash('md5').update(`${nonce}${username}${hashPassword}`, 'utf8').digest('hex');\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      yield connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    })();\n  }\n\n}\n\nexports.MongoCR = MongoCR;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cmap/auth/mongocr.js"],"names":["Object","defineProperty","exports","value","MongoCR","crypto","require","error_1","utils_1","auth_provider_1","AuthProvider","auth","authContext","connection","credentials","MongoMissingCredentialsError","username","password","source","nonce","commandAsync","ns","getnonce","undefined","hashPassword","createHash","update","digest","key","authenticateCommand","authenticate","user"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMF,OAAN,SAAsBK,eAAe,CAACC,YAAtC,CAAmD;AACzCC,EAAAA,IAAI,CAACC,WAAD,EAAc;AAAA;AACpB,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA8BF,WAApC;;AACA,UAAI,CAACE,WAAL,EAAkB;AACd,cAAM,IAAIP,OAAO,CAACQ,4BAAZ,CAAyC,uCAAzC,CAAN;AACH;;AACD,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,QAAZ;AAAsBC,QAAAA;AAAtB,UAAiCJ,WAAvC;AACA,YAAM;AAAEK,QAAAA;AAAF,gBAAkBN,UAAU,CAACO,YAAX,CAAwB,CAAC,GAAGZ,OAAO,CAACa,EAAZ,EAAiB,GAAEH,MAAO,OAA1B,CAAxB,EAA2D;AAAEI,QAAAA,QAAQ,EAAE;AAAZ,OAA3D,EAA4EC,SAA5E,CAAxB;AACA,YAAMC,YAAY,GAAGnB,MAAM,CACtBoB,UADgB,CACL,KADK,EAEhBC,MAFgB,CAER,GAAEV,QAAS,UAASC,QAAS,EAFrB,EAEwB,MAFxB,EAGhBU,MAHgB,CAGT,KAHS,CAArB,CAPoB,CAWpB;;AACA,YAAMC,GAAG,GAAGvB,MAAM,CACboB,UADO,CACI,KADJ,EAEPC,MAFO,CAEC,GAAEP,KAAM,GAAEH,QAAS,GAAEQ,YAAa,EAFnC,EAEsC,MAFtC,EAGPG,MAHO,CAGA,KAHA,CAAZ;AAIA,YAAME,mBAAmB,GAAG;AACxBC,QAAAA,YAAY,EAAE,CADU;AAExBC,QAAAA,IAAI,EAAEf,QAFkB;AAGxBG,QAAAA,KAHwB;AAIxBS,QAAAA;AAJwB,OAA5B;AAMA,YAAMf,UAAU,CAACO,YAAX,CAAwB,CAAC,GAAGZ,OAAO,CAACa,EAAZ,EAAiB,GAAEH,MAAO,OAA1B,CAAxB,EAA2DW,mBAA3D,EAAgFN,SAAhF,CAAN;AAtBoB;AAuBvB;;AAxB8C;;AA0BnDrB,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), { getnonce: 1 }, undefined);\n        const hashPassword = crypto\n            .createHash('md5')\n            .update(`${username}:mongo:${password}`, 'utf8')\n            .digest('hex');\n        // Final key\n        const key = crypto\n            .createHash('md5')\n            .update(`${nonce}${username}${hashPassword}`, 'utf8')\n            .digest('hex');\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR;\n"]},"metadata":{},"sourceType":"script"}