{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\n\n\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n\n\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n\n\n  start(start = 0) {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n\n\n  end(end = 0) {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n\n\n  abort() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.push(null);\n\n      _this.destroyed = true;\n\n      if (_this.s.cursor) {\n        try {\n          yield _this.s.cursor.close();\n        } finally {\n          _this.emit(GridFSBucketReadStream.CLOSE);\n        }\n      } else {\n        if (!_this.s.init) {\n          // If not initialized, fire close event because we will never\n          // get a cursor\n          _this.emit(GridFSBucketReadStream.CLOSE);\n        }\n      }\n    })();\n  }\n\n}\n\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\n\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\n\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\n\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\n\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\n\nGridFSBucketReadStream.CLOSE = 'close';\n\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  const handleReadResult = ({\n    error,\n    doc\n  }) => {\n    if (stream.destroyed) {\n      return;\n    }\n\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n\n    if (!doc) {\n      stream.push(null);\n      stream.s.cursor?.close().then(() => {\n        stream.emit(GridFSBucketReadStream.CLOSE);\n      }, error => {\n        stream.emit(GridFSBucketReadStream.ERROR, error);\n      });\n      return;\n    }\n\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n\n    if (doc.n > expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n\n    if (doc.n < expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n      }\n\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n    return;\n  };\n\n  stream.s.cursor.next().then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\n\nfunction init(stream) {\n  const findOneOptions = {};\n\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  const handleReadResult = ({\n    error,\n    doc\n  }) => {\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`; // TODO(NODE-3483)\n\n      const err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    } // If document is empty, kill the stream immediately and don't\n    // execute any reads\n\n\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    const filter = {\n      files_id: doc._id\n    }; // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\n\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n    }\n\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n    }\n\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/gridfs/download.js"],"names":["Object","defineProperty","exports","value","GridFSBucketReadStream","stream_1","require","error_1","Readable","constructor","chunks","files","readPreference","filter","options","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","_read","destroyed","waitForFile","doRead","throwIfInitialized","abort","push","cursor","close","emit","CLOSE","ERROR","FILE","DATA","END","stream","MongoGridFSStreamError","file","handleReadResult","error","doc","then","bytesRemaining","length","expectedN","expectedLength","Math","min","chunkSize","n","MongoGridFSChunkError","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","next","findOneOptions","sort","skip","identifier","_id","toString","filename","errmsg","err","MongoRuntimeError","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","findOne","callback","once","MongoInvalidArgumentError","limit"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super();\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroyed = true;\n        if (this.s.cursor) {\n            try {\n                await this.s.cursor.close();\n            }\n            finally {\n                this.emit(GridFSBucketReadStream.CLOSE);\n            }\n        }\n        else {\n            if (!this.s.init) {\n                // If not initialized, fire close event because we will never\n                // get a cursor\n                this.emit(GridFSBucketReadStream.CLOSE);\n            }\n        }\n    }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\nGridFSBucketReadStream.CLOSE = 'close';\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = ({ error, doc }) => {\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.emit(GridFSBucketReadStream.ERROR, error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(() => {\n                stream.emit(GridFSBucketReadStream.CLOSE);\n            }, error => {\n                stream.emit(GridFSBucketReadStream.ERROR, error);\n            });\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc }) => {\n        if (error) {\n            return stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.emit(GridFSBucketReadStream.ERROR, err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.emit(GridFSBucketReadStream.CLOSE);\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n"]},"metadata":{},"sourceType":"script"}