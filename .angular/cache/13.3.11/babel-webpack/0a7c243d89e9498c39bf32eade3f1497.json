{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst aws_service_workflow_1 = require(\"./mongodb_oidc/aws_service_workflow\");\n\nconst callback_workflow_1 = require(\"./mongodb_oidc/callback_workflow\");\n/** @internal */\n\n\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\n\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n  /**\n   * Instantiate the auth provider.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Authenticate using OIDC\n   */\n\n\n  auth(authContext) {\n    return _asyncToGenerator(function* () {\n      const {\n        connection,\n        credentials,\n        response,\n        reauthenticating\n      } = authContext;\n\n      if (response?.speculativeAuthenticate) {\n        return;\n      }\n\n      if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n      }\n\n      const workflow = getWorkflow(credentials);\n      yield workflow.execute(connection, credentials, reauthenticating);\n    })();\n  }\n  /**\n   * Add the speculative auth for the initial handshake.\n   */\n\n\n  prepare(handshakeDoc, authContext) {\n    return _asyncToGenerator(function* () {\n      const {\n        credentials\n      } = authContext;\n\n      if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n      }\n\n      const workflow = getWorkflow(credentials);\n      const result = yield workflow.speculativeAuth();\n      return { ...handshakeDoc,\n        ...result\n      };\n    })();\n  }\n\n}\n\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Gets either a device workflow or callback workflow.\n */\n\nfunction getWorkflow(credentials) {\n  const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n  const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n\n  if (!workflow) {\n    throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n  }\n\n  return workflow;\n}","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js"],"names":["Object","defineProperty","exports","value","MongoDBOIDC","OIDC_WORKFLOWS","error_1","require","auth_provider_1","aws_service_workflow_1","callback_workflow_1","Map","set","CallbackWorkflow","AwsServiceWorkflow","AuthProvider","constructor","auth","authContext","connection","credentials","response","reauthenticating","speculativeAuthenticate","MongoMissingCredentialsError","workflow","getWorkflow","execute","prepare","handshakeDoc","result","speculativeAuth","providerName","mechanismProperties","PROVIDER_NAME","get","MongoInvalidArgumentError"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,cAAR,GAAyB,KAAK,CAApD;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAME,sBAAsB,GAAGF,OAAO,CAAC,qCAAD,CAAtC;;AACA,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,kCAAD,CAAnC;AACA;;;AACAL,OAAO,CAACG,cAAR,GAAyB,IAAIM,GAAJ,EAAzB;AACAT,OAAO,CAACG,cAAR,CAAuBO,GAAvB,CAA2B,UAA3B,EAAuC,IAAIF,mBAAmB,CAACG,gBAAxB,EAAvC;AACAX,OAAO,CAACG,cAAR,CAAuBO,GAAvB,CAA2B,KAA3B,EAAkC,IAAIH,sBAAsB,CAACK,kBAA3B,EAAlC;AACA;AACA;AACA;AACA;;AACA,MAAMV,WAAN,SAA0BI,eAAe,CAACO,YAA1C,CAAuD;AACnD;AACJ;AACA;AACIC,EAAAA,WAAW,GAAG;AACV;AACH;AACD;AACJ;AACA;;;AACUC,EAAAA,IAAI,CAACC,WAAD,EAAc;AAAA;AACpB,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA,WAAd;AAA2BC,QAAAA,QAA3B;AAAqCC,QAAAA;AAArC,UAA0DJ,WAAhE;;AACA,UAAIG,QAAQ,EAAEE,uBAAd,EAAuC;AACnC;AACH;;AACD,UAAI,CAACH,WAAL,EAAkB;AACd,cAAM,IAAId,OAAO,CAACkB,4BAAZ,CAAyC,uCAAzC,CAAN;AACH;;AACD,YAAMC,QAAQ,GAAGC,WAAW,CAACN,WAAD,CAA5B;AACA,YAAMK,QAAQ,CAACE,OAAT,CAAiBR,UAAjB,EAA6BC,WAA7B,EAA0CE,gBAA1C,CAAN;AAToB;AAUvB;AACD;AACJ;AACA;;;AACUM,EAAAA,OAAO,CAACC,YAAD,EAAeX,WAAf,EAA4B;AAAA;AACrC,YAAM;AAAEE,QAAAA;AAAF,UAAkBF,WAAxB;;AACA,UAAI,CAACE,WAAL,EAAkB;AACd,cAAM,IAAId,OAAO,CAACkB,4BAAZ,CAAyC,uCAAzC,CAAN;AACH;;AACD,YAAMC,QAAQ,GAAGC,WAAW,CAACN,WAAD,CAA5B;AACA,YAAMU,MAAM,SAASL,QAAQ,CAACM,eAAT,EAArB;AACA,aAAO,EAAE,GAAGF,YAAL;AAAmB,WAAGC;AAAtB,OAAP;AAPqC;AAQxC;;AAhCkD;;AAkCvD5B,OAAO,CAACE,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;;AACA,SAASsB,WAAT,CAAqBN,WAArB,EAAkC;AAC9B,QAAMY,YAAY,GAAGZ,WAAW,CAACa,mBAAZ,CAAgCC,aAArD;AACA,QAAMT,QAAQ,GAAGvB,OAAO,CAACG,cAAR,CAAuB8B,GAAvB,CAA2BH,YAAY,IAAI,UAA3C,CAAjB;;AACA,MAAI,CAACP,QAAL,EAAe;AACX,UAAM,IAAInB,OAAO,CAAC8B,yBAAZ,CAAuC,wCAAuChB,WAAW,CAACa,mBAAZ,CAAgCC,aAAc,EAA5H,CAAN;AACH;;AACD,SAAOT,QAAP;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = require(\"../../error\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst aws_service_workflow_1 = require(\"./mongodb_oidc/aws_service_workflow\");\nconst callback_workflow_1 = require(\"./mongodb_oidc/callback_workflow\");\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor() {\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, credentials, response, reauthenticating } = authContext;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth();\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n}\n"]},"metadata":{},"sourceType":"script"}