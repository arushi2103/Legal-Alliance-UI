{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\n\nconst admin_1 = require(\"./admin\");\n\nconst bson_1 = require(\"./bson\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst collection_1 = require(\"./collection\");\n\nconst CONSTANTS = require(\"./constants\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst collections_1 = require(\"./operations/collections\");\n\nconst create_collection_1 = require(\"./operations/create_collection\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst profiling_level_1 = require(\"./operations/profiling_level\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\"); // Allowed parameters\n\n\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\n\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    options = options ?? {}; // Filter the options\n\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST); // Ensure we have a valid db name\n\n    validateDatabaseName(databaseName); // Internal state of the db object\n\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName() {\n    return this.s.namespace.db;\n  } // Options\n\n\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n\n\n  get secondaryOk() {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  } // get the write Concern\n\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n\n\n  createCollection(name, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this.s.client, new create_collection_1.CreateCollectionOperation(_this, name, (0, utils_1.resolveOptions)(_this, options)));\n    })();\n  }\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n\n\n  command(command, options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Intentionally, we do not inherit options from parent for this operation.\n      return (0, execute_operation_1.executeOperation)(_this2.s.client, new run_command_1.RunCommandOperation(_this2, command, options));\n    })();\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate(pipeline = [], options) {\n    return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n\n\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n\n\n  collection(name, options = {}) {\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n\n    return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  stats(options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this3.s.client, new stats_1.DbStatsOperation(_this3, (0, utils_1.resolveOptions)(_this3, options)));\n    })();\n  }\n\n  listCollections(filter = {}, options = {}) {\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n\n\n  renameCollection(fromCollection, toCollection, options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Intentionally, we do not inherit options from parent for this operation.\n      return (0, execute_operation_1.executeOperation)(_this4.s.client, new rename_1.RenameOperation(_this4.collection(fromCollection), toCollection, { ...options,\n        new_collection: true,\n        readPreference: read_preference_1.ReadPreference.primary\n      }));\n    })();\n  }\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n\n\n  dropCollection(name, options) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this5.s.client, new drop_1.DropCollectionOperation(_this5, name, (0, utils_1.resolveOptions)(_this5, options)));\n    })();\n  }\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  dropDatabase(options) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this6.s.client, new drop_1.DropDatabaseOperation(_this6, (0, utils_1.resolveOptions)(_this6, options)));\n    })();\n  }\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  collections(options) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this7.s.client, new collections_1.CollectionsOperation(_this7, (0, utils_1.resolveOptions)(_this7, options)));\n    })();\n  }\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n\n\n  createIndex(name, indexSpec, options) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this8.s.client, new indexes_1.CreateIndexOperation(_this8, name, indexSpec, (0, utils_1.resolveOptions)(_this8, options)));\n    })();\n  }\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   */\n\n\n  addUser(username, passwordOrOptions, options) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n      const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n      return (0, execute_operation_1.executeOperation)(_this9.s.client, new add_user_1.AddUserOperation(_this9, username, password, (0, utils_1.resolveOptions)(_this9, options)));\n    })();\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  removeUser(username, options) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this10.s.client, new remove_user_1.RemoveUserOperation(_this10, username, (0, utils_1.resolveOptions)(_this10, options)));\n    })();\n  }\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n\n\n  setProfilingLevel(level, options) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this11.s.client, new set_profiling_level_1.SetProfilingLevelOperation(_this11, level, (0, utils_1.resolveOptions)(_this11, options)));\n    })();\n  }\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  profilingLevel(options) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this12.s.client, new profiling_level_1.ProfilingLevelOperation(_this12, (0, utils_1.resolveOptions)(_this12, options)));\n    })();\n  }\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n\n\n  indexInformation(name, options) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this13.s.client, new indexes_1.IndexInformationOperation(_this13, name, (0, utils_1.resolveOptions)(_this13, options)));\n    })();\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n\n\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n\n}\n\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION; // TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\n\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/db.js"],"names":["Object","defineProperty","exports","value","Db","admin_1","require","bson_1","change_stream_1","collection_1","CONSTANTS","aggregation_cursor_1","list_collections_cursor_1","error_1","add_user_1","collections_1","create_collection_1","drop_1","execute_operation_1","indexes_1","profiling_level_1","remove_user_1","rename_1","run_command_1","set_profiling_level_1","stats_1","read_concern_1","read_preference_1","utils_1","write_concern_1","DB_OPTIONS_ALLOW_LIST","constructor","client","databaseName","options","filterOptions","validateDatabaseName","s","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","db","secondaryOk","preference","toString","createCollection","name","executeOperation","CreateCollectionOperation","resolveOptions","command","RunCommandOperation","aggregate","pipeline","AggregationCursor","admin","Admin","collection","MongoInvalidArgumentError","Collection","stats","DbStatsOperation","listCollections","filter","ListCollectionsCursor","renameCollection","fromCollection","toCollection","RenameOperation","new_collection","primary","dropCollection","DropCollectionOperation","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","createIndex","indexSpec","CreateIndexOperation","addUser","username","passwordOrOptions","undefined","password","AddUserOperation","removeUser","RemoveUserOperation","setProfilingLevel","level","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","indexInformation","IndexInformationOperation","watch","Array","isArray","ChangeStream","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","length","invalidChars","i","indexOf","MongoAPIError"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst error_1 = require(\"./error\");\nconst add_user_1 = require(\"./operations/add_user\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure we have a valid db name\n        validateDatabaseName(databaseName);\n        // Internal state of the db object\n        this.s = {\n            // Client\n            client,\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.s.client, new run_command_1.RunCommandOperation(this, command, options));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.s.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options, new_collection: true, readPreference: read_preference_1.ReadPreference.primary }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Add a user to the database\n     *\n     * @param username - The username for the new user\n     * @param passwordOrOptions - An optional password for the new user, or the options for the command\n     * @param options - Optional settings for the command\n     */\n    async addUser(username, passwordOrOptions, options) {\n        options =\n            options != null && typeof options === 'object'\n                ? options\n                : passwordOrOptions != null && typeof passwordOrOptions === 'object'\n                    ? passwordOrOptions\n                    : undefined;\n        const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n        return (0, execute_operation_1.executeOperation)(this.s.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n    if (typeof databaseName !== 'string')\n        throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n    if (databaseName.length === 0)\n        throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n    if (databaseName === '$external')\n        return;\n    const invalidChars = [' ', '.', '$', '/', '\\\\'];\n    for (let i = 0; i < invalidChars.length; i++) {\n        if (databaseName.indexOf(invalidChars[i]) !== -1)\n            throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}