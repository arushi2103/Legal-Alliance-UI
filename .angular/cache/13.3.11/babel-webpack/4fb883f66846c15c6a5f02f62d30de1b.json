{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst list_databases_1 = require(\"./operations/list_databases\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\n\n\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  /**\n   * Execute a command\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   */\n\n\n  command(command, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this.s.db.s.client, new run_command_1.RunCommandOperation(_this.s.db, command, {\n        dbName: 'admin',\n        ...options\n      }));\n    })();\n  }\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  buildInfo(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.command({\n        buildinfo: 1\n      }, options);\n    })();\n  }\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  serverInfo(options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.command({\n        buildinfo: 1\n      }, options);\n    })();\n  }\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  serverStatus(options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this4.command({\n        serverStatus: 1\n      }, options);\n    })();\n  }\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  ping(options) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.command({\n        ping: 1\n      }, options);\n    })();\n  }\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   */\n\n\n  addUser(username, passwordOrOptions, options) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n      const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n      return (0, execute_operation_1.executeOperation)(_this6.s.db.s.client, new add_user_1.AddUserOperation(_this6.s.db, username, password, {\n        dbName: 'admin',\n        ...options\n      }));\n    })();\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  removeUser(username, options) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this7.s.db.s.client, new remove_user_1.RemoveUserOperation(_this7.s.db, username, {\n        dbName: 'admin',\n        ...options\n      }));\n    })();\n  }\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   */\n\n\n  validateCollection(collectionName, options = {}) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this8.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(_this8, collectionName, options));\n    })();\n  }\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  listDatabases(options) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this9.s.db.s.client, new list_databases_1.ListDatabasesOperation(_this9.s.db, options));\n    })();\n  }\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  replSetGetStatus(options) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this10.command({\n        replSetGetStatus: 1\n      }, options);\n    })();\n  }\n\n}\n\nexports.Admin = Admin;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/admin.js"],"names":["Object","defineProperty","exports","value","Admin","add_user_1","require","execute_operation_1","list_databases_1","remove_user_1","run_command_1","validate_collection_1","constructor","db","s","command","options","executeOperation","client","RunCommandOperation","dbName","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","passwordOrOptions","undefined","password","AddUserOperation","removeUser","RemoveUserOperation","validateCollection","collectionName","ValidateCollectionOperation","listDatabases","ListDatabasesOperation","replSetGetStatus"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return this.command({ ping: 1 }, options);\n    }\n    /**\n     * Add a user to the database\n     *\n     * @param username - The username for the new user\n     * @param passwordOrOptions - An optional password for the new user, or the options for the command\n     * @param options - Optional settings for the command\n     */\n    async addUser(username, passwordOrOptions, options) {\n        options =\n            options != null && typeof options === 'object'\n                ? options\n                : passwordOrOptions != null && typeof passwordOrOptions === 'object'\n                    ? passwordOrOptions\n                    : undefined;\n        const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n"]},"metadata":{},"sourceType":"script"}