{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateCollectionOperation = void 0;\n\nconst collection_1 = require(\"../collection\");\n\nconst command_1 = require(\"./command\");\n\nconst indexes_1 = require(\"./indexes\");\n\nconst operation_1 = require(\"./operation\");\n\nconst ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern', 'raw', 'fieldsAsRaw', 'useBigInt64', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined', 'enableUtf8Validation']);\n/** @internal */\n\nclass CreateCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name, options = {}) {\n    super(db, options);\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  execute(server, session, callback) {\n    var _this = this;\n\n    _asyncToGenerator(function* () {\n      const db = _this.db;\n      const name = _this.name;\n      const options = _this.options;\n      const encryptedFields = options.encryptedFields ?? db.s.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n\n      if (encryptedFields) {\n        // Create auxilliary collections for queryable encryption support.\n        const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n        const eccCollection = encryptedFields.eccCollection ?? `enxcol_.${name}.ecc`;\n        const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n\n        for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n          const createOp = new CreateCollectionOperation(db, collectionName, {\n            clusteredIndex: {\n              key: {\n                _id: 1\n              },\n              unique: true\n            }\n          });\n          yield createOp.executeWithoutEncryptedFieldsCheck(server, session);\n        }\n\n        if (!options.encryptedFields) {\n          _this.options = { ..._this.options,\n            encryptedFields\n          };\n        }\n      }\n\n      const coll = yield _this.executeWithoutEncryptedFieldsCheck(server, session);\n\n      if (encryptedFields) {\n        // Create the required index for queryable encryption support.\n        const createIndexOp = new indexes_1.CreateIndexOperation(db, name, {\n          __safeContent__: 1\n        }, {});\n        yield new Promise((resolve, reject) => {\n          createIndexOp.execute(server, session, err => err ? reject(err) : resolve());\n        });\n      }\n\n      return coll;\n    })().then(coll => callback(undefined, coll), err => callback(err));\n  }\n\n  executeWithoutEncryptedFieldsCheck(server, session) {\n    return new Promise((resolve, reject) => {\n      const db = this.db;\n      const name = this.name;\n      const options = this.options;\n\n      const done = err => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(new collection_1.Collection(db, name, options));\n      };\n\n      const cmd = {\n        create: name\n      };\n\n      for (const n in options) {\n        if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n          cmd[n] = options[n];\n        }\n      } // otherwise just execute the command\n\n\n      super.executeCommand(server, session, cmd, done);\n    });\n  }\n\n}\n\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/operations/create_collection.js"],"names":["Object","defineProperty","exports","value","CreateCollectionOperation","collection_1","require","command_1","indexes_1","operation_1","ILLEGAL_COMMAND_FIELDS","Set","CommandOperation","constructor","db","name","options","execute","server","session","callback","encryptedFields","s","client","autoEncryption","encryptedFieldsMap","databaseName","escCollection","eccCollection","ecocCollection","collectionName","createOp","clusteredIndex","key","_id","unique","executeWithoutEncryptedFieldsCheck","coll","createIndexOp","CreateIndexOperation","__safeContent__","Promise","resolve","reject","err","then","undefined","done","Collection","cmd","create","n","has","executeCommand","defineAspects","Aspect","WRITE_OPERATION"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,sBAAsB,GAAG,IAAIC,GAAJ,CAAQ,CACnC,GADmC,EAEnC,UAFmC,EAGnC,GAHmC,EAInC,OAJmC,EAKnC,aALmC,EAMnC,WANmC,EAOnC,KAPmC,EAQnC,gBARmC,EASnC,SATmC,EAUnC,aAVmC,EAWnC,cAXmC,EAYnC,KAZmC,EAanC,aAbmC,EAcnC,aAdmC,EAenC,cAfmC,EAgBnC,eAhBmC,EAiBnC,gBAjBmC,EAkBnC,YAlBmC,EAmBnC,oBAnBmC,EAoBnC,iBApBmC,EAqBnC,sBArBmC,CAAR,CAA/B;AAuBA;;AACA,MAAMP,yBAAN,SAAwCG,SAAS,CAACK,gBAAlD,CAAmE;AAC/DC,EAAAA,WAAW,CAACC,EAAD,EAAKC,IAAL,EAAWC,OAAO,GAAG,EAArB,EAAyB;AAChC,UAAMF,EAAN,EAAUE,OAAV;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH;;AACDE,EAAAA,OAAO,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAAA;;AAC/B,sBAAC,aAAY;AACT,YAAMN,EAAE,GAAG,KAAI,CAACA,EAAhB;AACA,YAAMC,IAAI,GAAG,KAAI,CAACA,IAAlB;AACA,YAAMC,OAAO,GAAG,KAAI,CAACA,OAArB;AACA,YAAMK,eAAe,GAAGL,OAAO,CAACK,eAAR,IACpBP,EAAE,CAACQ,CAAH,CAAKC,MAAL,CAAYP,OAAZ,CAAoBQ,cAApB,EAAoCC,kBAApC,GAA0D,GAAEX,EAAE,CAACY,YAAa,IAAGX,IAAK,EAApF,CADJ;;AAEA,UAAIM,eAAJ,EAAqB;AACjB;AACA,cAAMM,aAAa,GAAGN,eAAe,CAACM,aAAhB,IAAkC,WAAUZ,IAAK,MAAvE;AACA,cAAMa,aAAa,GAAGP,eAAe,CAACO,aAAhB,IAAkC,WAAUb,IAAK,MAAvE;AACA,cAAMc,cAAc,GAAGR,eAAe,CAACQ,cAAhB,IAAmC,WAAUd,IAAK,OAAzE;;AACA,aAAK,MAAMe,cAAX,IAA6B,CAACH,aAAD,EAAgBC,aAAhB,EAA+BC,cAA/B,CAA7B,EAA6E;AACzE,gBAAME,QAAQ,GAAG,IAAI3B,yBAAJ,CAA8BU,EAA9B,EAAkCgB,cAAlC,EAAkD;AAC/DE,YAAAA,cAAc,EAAE;AACZC,cAAAA,GAAG,EAAE;AAAEC,gBAAAA,GAAG,EAAE;AAAP,eADO;AAEZC,cAAAA,MAAM,EAAE;AAFI;AAD+C,WAAlD,CAAjB;AAMA,gBAAMJ,QAAQ,CAACK,kCAAT,CAA4ClB,MAA5C,EAAoDC,OAApD,CAAN;AACH;;AACD,YAAI,CAACH,OAAO,CAACK,eAAb,EAA8B;AAC1B,UAAA,KAAI,CAACL,OAAL,GAAe,EAAE,GAAG,KAAI,CAACA,OAAV;AAAmBK,YAAAA;AAAnB,WAAf;AACH;AACJ;;AACD,YAAMgB,IAAI,SAAS,KAAI,CAACD,kCAAL,CAAwClB,MAAxC,EAAgDC,OAAhD,CAAnB;;AACA,UAAIE,eAAJ,EAAqB;AACjB;AACA,cAAMiB,aAAa,GAAG,IAAI9B,SAAS,CAAC+B,oBAAd,CAAmCzB,EAAnC,EAAuCC,IAAvC,EAA6C;AAAEyB,UAAAA,eAAe,EAAE;AAAnB,SAA7C,EAAqE,EAArE,CAAtB;AACA,cAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnCL,UAAAA,aAAa,CAACrB,OAAd,CAAsBC,MAAtB,EAA8BC,OAA9B,EAAuCyB,GAAG,IAAKA,GAAG,GAAGD,MAAM,CAACC,GAAD,CAAT,GAAiBF,OAAO,EAA1E;AACH,SAFK,CAAN;AAGH;;AACD,aAAOL,IAAP;AACH,KAjCD,IAiCKQ,IAjCL,CAiCUR,IAAI,IAAIjB,QAAQ,CAAC0B,SAAD,EAAYT,IAAZ,CAjC1B,EAiC6CO,GAAG,IAAIxB,QAAQ,CAACwB,GAAD,CAjC5D;AAkCH;;AACDR,EAAAA,kCAAkC,CAAClB,MAAD,EAASC,OAAT,EAAkB;AAChD,WAAO,IAAIsB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAM7B,EAAE,GAAG,KAAKA,EAAhB;AACA,YAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,YAAMC,OAAO,GAAG,KAAKA,OAArB;;AACA,YAAM+B,IAAI,GAAGH,GAAG,IAAI;AAChB,YAAIA,GAAJ,EAAS;AACL,iBAAOD,MAAM,CAACC,GAAD,CAAb;AACH;;AACDF,QAAAA,OAAO,CAAC,IAAIrC,YAAY,CAAC2C,UAAjB,CAA4BlC,EAA5B,EAAgCC,IAAhC,EAAsCC,OAAtC,CAAD,CAAP;AACH,OALD;;AAMA,YAAMiC,GAAG,GAAG;AAAEC,QAAAA,MAAM,EAAEnC;AAAV,OAAZ;;AACA,WAAK,MAAMoC,CAAX,IAAgBnC,OAAhB,EAAyB;AACrB,YAAIA,OAAO,CAACmC,CAAD,CAAP,IAAc,IAAd,IACA,OAAOnC,OAAO,CAACmC,CAAD,CAAd,KAAsB,UADtB,IAEA,CAACzC,sBAAsB,CAAC0C,GAAvB,CAA2BD,CAA3B,CAFL,EAEoC;AAChCF,UAAAA,GAAG,CAACE,CAAD,CAAH,GAASnC,OAAO,CAACmC,CAAD,CAAhB;AACH;AACJ,OAjBmC,CAkBpC;;;AACA,YAAME,cAAN,CAAqBnC,MAArB,EAA6BC,OAA7B,EAAsC8B,GAAtC,EAA2CF,IAA3C;AACH,KApBM,CAAP;AAqBH;;AAjE8D;;AAmEnE7C,OAAO,CAACE,yBAAR,GAAoCA,yBAApC;AACA,CAAC,GAAGK,WAAW,CAAC6C,aAAhB,EAA+BlD,yBAA/B,EAA0D,CAACK,WAAW,CAAC8C,MAAZ,CAAmBC,eAApB,CAA1D","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateCollectionOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst command_1 = require(\"./command\");\nconst indexes_1 = require(\"./indexes\");\nconst operation_1 = require(\"./operation\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    execute(server, session, callback) {\n        (async () => {\n            const db = this.db;\n            const name = this.name;\n            const options = this.options;\n            const encryptedFields = options.encryptedFields ??\n                db.s.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n            if (encryptedFields) {\n                // Create auxilliary collections for queryable encryption support.\n                const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n                const eccCollection = encryptedFields.eccCollection ?? `enxcol_.${name}.ecc`;\n                const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n                for (const collectionName of [escCollection, eccCollection, ecocCollection]) {\n                    const createOp = new CreateCollectionOperation(db, collectionName, {\n                        clusteredIndex: {\n                            key: { _id: 1 },\n                            unique: true\n                        }\n                    });\n                    await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n                }\n                if (!options.encryptedFields) {\n                    this.options = { ...this.options, encryptedFields };\n                }\n            }\n            const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n            if (encryptedFields) {\n                // Create the required index for queryable encryption support.\n                const createIndexOp = new indexes_1.CreateIndexOperation(db, name, { __safeContent__: 1 }, {});\n                await new Promise((resolve, reject) => {\n                    createIndexOp.execute(server, session, err => (err ? reject(err) : resolve()));\n                });\n            }\n            return coll;\n        })().then(coll => callback(undefined, coll), err => callback(err));\n    }\n    executeWithoutEncryptedFieldsCheck(server, session) {\n        return new Promise((resolve, reject) => {\n            const db = this.db;\n            const name = this.name;\n            const options = this.options;\n            const done = err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(new collection_1.Collection(db, name, options));\n            };\n            const cmd = { create: name };\n            for (const n in options) {\n                if (options[n] != null &&\n                    typeof options[n] !== 'function' &&\n                    !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                    cmd[n] = options[n];\n                }\n            }\n            // otherwise just execute the command\n            super.executeCommand(server, session, cmd, done);\n        });\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}