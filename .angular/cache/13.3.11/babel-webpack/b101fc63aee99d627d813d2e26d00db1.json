{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\wrapAsyncGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\n\nconst collection_1 = require(\"./collection\");\n\nconst constants_1 = require(\"./constants\");\n\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent, pipeline = [], options = {}) {\n    super();\n    this.pipeline = pipeline;\n    this.options = { ...options\n    };\n    delete this.options.writeConcern;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    } // Create contained Change Stream cursor\n\n\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    return this.cursor?.resumeToken;\n  }\n  /** Check if there is any document still available in the Change Stream */\n\n\n  hasNext() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._setIsIterator(); // Change streams must resume indefinitely while each resume event succeeds.\n      // This loop continues until either a change event is received or until a resume attempt\n      // fails.\n      // eslint-disable-next-line no-constant-condition\n\n\n      while (true) {\n        try {\n          const hasNext = yield _this2.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            yield _this2._processErrorIteratorMode(error);\n          } catch (error) {\n            try {\n              yield _this2.close();\n            } catch {// We are not concerned with errors from close()\n            }\n\n            throw error;\n          }\n        }\n      }\n    })();\n  }\n  /** Get the next available document from the Change Stream. */\n\n\n  next() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3._setIsIterator(); // Change streams must resume indefinitely while each resume event succeeds.\n      // This loop continues until either a change event is received or until a resume attempt\n      // fails.\n      // eslint-disable-next-line no-constant-condition\n\n\n      while (true) {\n        try {\n          const change = yield _this3.cursor.next();\n\n          const processedChange = _this3._processChange(change ?? null);\n\n          return processedChange;\n        } catch (error) {\n          try {\n            yield _this3._processErrorIteratorMode(error);\n          } catch (error) {\n            try {\n              yield _this3.close();\n            } catch {// We are not concerned with errors from close()\n            }\n\n            throw error;\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n\n\n  tryNext() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4._setIsIterator(); // Change streams must resume indefinitely while each resume event succeeds.\n      // This loop continues until either a change event is received or until a resume attempt\n      // fails.\n      // eslint-disable-next-line no-constant-condition\n\n\n      while (true) {\n        try {\n          const change = yield _this4.cursor.tryNext();\n          return change ?? null;\n        } catch (error) {\n          try {\n            yield _this4._processErrorIteratorMode(error);\n          } catch (error) {\n            try {\n              yield _this4.close();\n            } catch {// We are not concerned with errors from close()\n            }\n\n            throw error;\n          }\n        }\n      }\n    })();\n  }\n\n  [Symbol.asyncIterator]() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      if (_this.closed) {\n        return;\n      }\n\n      try {\n        // Change streams run indefinitely as long as errors are resumable\n        // So the only loop breaking condition is if `next()` throws\n        while (true) {\n          yield yield _awaitAsyncGenerator(_this.next());\n        }\n      } finally {\n        try {\n          yield _awaitAsyncGenerator(_this.close());\n        } catch {// we're not concerned with errors from close()\n        }\n      }\n    })();\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    return this[kClosed] || this.cursor.closed;\n  }\n  /** Close the Change Stream */\n\n\n  close() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5[kClosed] = true;\n      const cursor = _this5.cursor;\n\n      try {\n        yield cursor.close();\n      } finally {\n        _this5._endStream();\n      }\n    })();\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n\n\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n\n\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n\n\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n\n\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n  /** @internal */\n\n\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close().catch(() => null);\n  }\n  /** @internal */\n\n\n  _streamEvents(cursor) {\n    this._setIsEmitter();\n\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n  /** @internal */\n\n\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n\n\n  _processChange(change) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    } // cache the resume token\n\n\n    this.cursor.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n\n\n  _processErrorStreamMode(changeStreamError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n\n\n  _processErrorIteratorMode(changeStreamError) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this6[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n      }\n\n      if (!(0, error_1.isResumableError)(changeStreamError, _this6.cursor.maxWireVersion)) {\n        try {\n          yield _this6.close();\n        } catch {// ignore errors from close\n        }\n\n        throw changeStreamError;\n      }\n\n      yield _this6.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(_this6.parent);\n\n      try {\n        yield topology.selectServerAsync(_this6.cursor.readPreference, {});\n        _this6.cursor = _this6._createChangeStreamCursor(_this6.cursor.resumeOptions);\n      } catch {\n        // if the topology can't reconnect, close the stream\n        yield _this6.close();\n        throw changeStreamError;\n      }\n    })();\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\n\nChangeStream.MORE = constants_1.MORE;\n/** @event */\n\nChangeStream.INIT = constants_1.INIT;\n/** @event */\n\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\n\nChangeStream.END = constants_1.END;\n/** @event */\n\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/change_stream.js"],"names":["Object","defineProperty","exports","value","ChangeStream","collection_1","require","constants_1","change_stream_cursor_1","db_1","error_1","mongo_client_1","mongo_types_1","utils_1","kCursorStream","Symbol","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","RESUME_TOKEN_CHANGED","END","CLOSE","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","TypedEventEmitter","constructor","parent","pipeline","options","writeConcern","Collection","type","Db","MongoClient","MongoChangeStreamError","namespace","s","readPreference","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","removeAllListeners","cursorStream","resumeToken","hasNext","_setIsIterator","error","_processErrorIteratorMode","close","next","change","processedChange","_processChange","tryNext","asyncIterator","closed","_endStream","stream","streamOptions","_setIsEmitter","MongoAPIError","changeStreamStageOptions","filterOptions","allChangesForCluster","$changeStream","client","db","MongoRuntimeError","toString","changeStreamCursor","ChangeStreamCursor","event","e","emit","CHANGE","_closeEmitterModeWithError","ERROR","catch","_processErrorStreamMode","forEach","destroy","undefined","_id","cacheResumeToken","startAtOperationTime","changeStreamError","isResumableError","maxWireVersion","topology","getTopology","selectServer","serverSelectionError","resumeOptions","selectServerAsync","RESPONSE","MORE","INIT"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStream = void 0;\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch {\n                // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */\n    async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.s.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.s.db.s.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(() => null);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n                if (serverSelectionError)\n                    return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            }\n            catch {\n                // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(() => null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {});\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n"]},"metadata":{},"sourceType":"script"}