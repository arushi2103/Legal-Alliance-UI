{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst http = require(\"http\");\n\nconst url = require(\"url\");\n\nconst util_1 = require(\"util\");\n\nconst BSON = require(\"../../bson\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\n\nconst providers_1 = require(\"./providers\");\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  constructor() {\n    super();\n    this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n  }\n\n  auth(authContext) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        connection\n      } = authContext;\n\n      if (!authContext.credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n      }\n\n      if ('kModuleError' in deps_1.aws4) {\n        throw deps_1.aws4['kModuleError'];\n      }\n\n      const {\n        sign\n      } = deps_1.aws4;\n\n      if ((0, utils_1.maxWireVersion)(connection) < 9) {\n        throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n      }\n\n      if (!authContext.credentials.username) {\n        authContext.credentials = yield makeTempCredentials(authContext.credentials);\n      }\n\n      const {\n        credentials\n      } = authContext;\n      const accessKeyId = credentials.username;\n      const secretAccessKey = credentials.password;\n      const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN; // If all three defined, include sessionToken, else include username and pass, else no credentials\n\n      const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken\n      } : accessKeyId && secretAccessKey ? {\n        accessKeyId,\n        secretAccessKey\n      } : undefined;\n      const db = credentials.source;\n      const nonce = yield _this.randomBytesAsync(32);\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({\n          r: nonce,\n          p: ASCII_N\n        }, bsonOptions)\n      };\n      const saslStartResponse = yield connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n      const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n      const host = serverResponse.h;\n      const serverNonce = serverResponse.s.buffer;\n\n      if (serverNonce.length !== 64) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n      }\n\n      if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n        // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n        // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n      }\n\n      if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n      }\n\n      const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n      const options = sign({\n        method: 'POST',\n        host,\n        region: deriveRegion(serverResponse.h),\n        service: 'sts',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Content-Length': body.length,\n          'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n          'X-MongoDB-GS2-CB-Flag': 'n'\n        },\n        path: '/',\n        body\n      }, awsCredentials);\n      const payload = {\n        a: options.headers.Authorization,\n        d: options.headers['X-Amz-Date']\n      };\n\n      if (sessionToken) {\n        payload.t = sessionToken;\n      }\n\n      const saslContinue = {\n        saslContinue: 1,\n        conversationId: 1,\n        payload: BSON.serialize(payload, bsonOptions)\n      };\n      yield connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    })();\n  }\n\n}\n\nexports.MongoDBAWS = MongoDBAWS;\n\nfunction makeTempCredentials(_x) {\n  return _makeTempCredentials.apply(this, arguments);\n}\n\nfunction _makeTempCredentials() {\n  _makeTempCredentials = _asyncToGenerator(function* (credentials) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n      if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n        throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n      }\n\n      return new mongo_credentials_1.MongoCredentials({\n        username: creds.AccessKeyId,\n        password: creds.SecretAccessKey,\n        source: credentials.source,\n        mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n        mechanismProperties: {\n          AWS_SESSION_TOKEN: creds.Token\n        }\n      });\n    }\n\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)(); // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n\n    if ('kModuleError' in credentialProvider) {\n      // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n      // is set then drivers MUST assume that it was set by an AWS ECS agent\n      if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n        return makeMongoCredentialsFromAWSTemp(yield request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n      } // Otherwise assume we are on an EC2 instance\n      // get a token\n\n\n      const token = yield request(`${AWS_EC2_URI}/latest/api/token`, {\n        method: 'PUT',\n        json: false,\n        headers: {\n          'X-aws-ec2-metadata-token-ttl-seconds': 30\n        }\n      }); // get role name\n\n      const roleName = yield request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n        json: false,\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }); // get temp credentials\n\n      const creds = yield request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      });\n      return makeMongoCredentialsFromAWSTemp(creds);\n    } else {\n      /*\n       * Creates a credential provider that will attempt to find credentials from the\n       * following sources (listed in order of precedence):\n       *\n       * - Environment variables exposed via process.env\n       * - SSO credentials from token cache\n       * - Web identity token credentials\n       * - Shared credentials and config ini files\n       * - The EC2/ECS Instance Metadata Service\n       */\n      const {\n        fromNodeProviderChain\n      } = credentialProvider;\n      const provider = fromNodeProviderChain();\n\n      try {\n        const creds = yield provider();\n        return makeMongoCredentialsFromAWSTemp({\n          AccessKeyId: creds.accessKeyId,\n          SecretAccessKey: creds.secretAccessKey,\n          Token: creds.sessionToken,\n          Expiration: creds.expiration\n        });\n      } catch (error) {\n        throw new error_1.MongoAWSError(error.message);\n      }\n    }\n  });\n  return _makeTempCredentials.apply(this, arguments);\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(_x2) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator(function* (uri, options = {}) {\n    return new Promise((resolve, reject) => {\n      const requestOptions = {\n        method: 'GET',\n        timeout: 10000,\n        json: true,\n        ...url.parse(uri),\n        ...options\n      };\n      const req = http.request(requestOptions, res => {\n        res.setEncoding('utf8');\n        let data = '';\n        res.on('data', d => {\n          data += d;\n        });\n        res.once('end', () => {\n          if (options.json === false) {\n            resolve(data);\n            return;\n          }\n\n          try {\n            const parsed = JSON.parse(data);\n            resolve(parsed);\n          } catch {\n            // TODO(NODE-3483)\n            reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n          }\n        });\n      });\n      req.once('timeout', () => req.destroy(new error_1.MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`)));\n      req.once('error', error => reject(error));\n      req.end();\n    });\n  });\n  return _request.apply(this, arguments);\n}","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js"],"names":["Object","defineProperty","exports","value","MongoDBAWS","crypto","require","http","url","util_1","BSON","deps_1","error_1","utils_1","auth_provider_1","mongo_credentials_1","providers_1","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","AuthProvider","constructor","randomBytesAsync","promisify","randomBytes","auth","authContext","connection","credentials","MongoMissingCredentialsError","aws4","sign","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","db","source","nonce","saslStart","mechanism","payload","serialize","r","p","saslStartResponse","commandAsync","ns","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","MongoRuntimeError","ByteUtils","equals","subarray","byteLength","indexOf","body","options","method","region","deriveRegion","service","headers","toBase64","path","a","Authorization","d","t","saslContinue","conversationId","makeMongoCredentialsFromAWSTemp","creds","AccessKeyId","SecretAccessKey","Token","MongoCredentials","AuthMechanism","MONGODB_AWS","credentialProvider","getAwsCredentialProvider","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","token","json","roleName","fromNodeProviderChain","provider","Expiration","expiration","error","MongoAWSError","message","parts","split","uri","Promise","resolve","reject","requestOptions","timeout","parse","req","res","setEncoding","data","on","once","parsed","JSON","destroy","end"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBAWS = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst util_1 = require(\"util\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor() {\n        super();\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await this.randomBytesAsync(32);\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if ('kModuleError' in credentialProvider) {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    }\n    else {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        const { fromNodeProviderChain } = credentialProvider;\n        const provider = fromNodeProviderChain();\n        try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\n"]},"metadata":{},"sourceType":"script"}