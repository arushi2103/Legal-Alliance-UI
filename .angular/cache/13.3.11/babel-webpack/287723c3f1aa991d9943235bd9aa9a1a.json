{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\n\nconst util_1 = require(\"util\");\n\nconst zlib = require(\"zlib\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst error_1 = require(\"../../error\");\n/** @public */\n\n\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib)); // Facilitate compressing a message using an agreed compressor\n\nfunction compress(_x, _x2) {\n  return _compress.apply(this, arguments);\n}\n\nfunction _compress() {\n  _compress = _asyncToGenerator(function* (options, dataToBeCompressed) {\n    const zlibOptions = {};\n\n    switch (options.agreedCompressor) {\n      case 'snappy':\n        if ('kModuleError' in deps_1.Snappy) {\n          throw deps_1.Snappy['kModuleError'];\n        }\n\n        return deps_1.Snappy.compress(dataToBeCompressed);\n\n      case 'zstd':\n        if ('kModuleError' in deps_1.ZStandard) {\n          throw deps_1.ZStandard['kModuleError'];\n        }\n\n        return deps_1.ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n\n      case 'zlib':\n        if (options.zlibCompressionLevel) {\n          zlibOptions.level = options.zlibCompressionLevel;\n        }\n\n        return zlibDeflate(dataToBeCompressed, zlibOptions);\n\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n    }\n  });\n  return _compress.apply(this, arguments);\n}\n\nexports.compress = compress; // Decompress a message using the given compressor\n\nfunction decompress(_x3, _x4) {\n  return _decompress.apply(this, arguments);\n}\n\nfunction _decompress() {\n  _decompress = _asyncToGenerator(function* (compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n      throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n\n    switch (compressorID) {\n      case exports.Compressor.snappy:\n        if ('kModuleError' in deps_1.Snappy) {\n          throw deps_1.Snappy['kModuleError'];\n        }\n\n        return deps_1.Snappy.uncompress(compressedData, {\n          asBuffer: true\n        });\n\n      case exports.Compressor.zstd:\n        if ('kModuleError' in deps_1.ZStandard) {\n          throw deps_1.ZStandard['kModuleError'];\n        }\n\n        return deps_1.ZStandard.decompress(compressedData);\n\n      case exports.Compressor.zlib:\n        return zlibInflate(compressedData);\n\n      default:\n        return compressedData;\n    }\n  });\n  return _decompress.apply(this, arguments);\n}\n\nexports.decompress = decompress;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cmap/wire_protocol/compression.js"],"names":["Object","defineProperty","exports","value","decompress","compress","uncompressibleCommands","Compressor","util_1","require","zlib","constants_1","deps_1","error_1","freeze","none","snappy","zstd","Set","LEGACY_HELLO_COMMAND","ZSTD_COMPRESSION_LEVEL","zlibInflate","promisify","inflate","bind","zlibDeflate","deflate","options","dataToBeCompressed","zlibOptions","agreedCompressor","Snappy","ZStandard","zlibCompressionLevel","level","MongoInvalidArgumentError","compressorID","compressedData","MongoDecompressionError","uncompress","asBuffer"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy':\n            if ('kModuleError' in deps_1.Snappy) {\n                throw deps_1.Snappy['kModuleError'];\n            }\n            return deps_1.Snappy.compress(dataToBeCompressed);\n        case 'zstd':\n            if ('kModuleError' in deps_1.ZStandard) {\n                throw deps_1.ZStandard['kModuleError'];\n            }\n            return deps_1.ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        case 'zlib':\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return zlibDeflate(dataToBeCompressed, zlibOptions);\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy:\n            if ('kModuleError' in deps_1.Snappy) {\n                throw deps_1.Snappy['kModuleError'];\n            }\n            return deps_1.Snappy.uncompress(compressedData, { asBuffer: true });\n        case exports.Compressor.zstd:\n            if ('kModuleError' in deps_1.ZStandard) {\n                throw deps_1.ZStandard['kModuleError'];\n            }\n            return deps_1.ZStandard.decompress(compressedData);\n        case exports.Compressor.zlib:\n            return zlibInflate(compressedData);\n        default:\n            return compressedData;\n    }\n}\nexports.decompress = decompress;\n"]},"metadata":{},"sourceType":"script"}