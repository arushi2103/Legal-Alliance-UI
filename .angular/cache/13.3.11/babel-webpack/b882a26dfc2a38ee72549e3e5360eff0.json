{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\n\nconst dns = require(\"dns\");\n\nconst fs = require(\"fs\");\n\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nconst url_1 = require(\"url\");\n\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nconst providers_1 = require(\"./cmap/auth/providers\");\n\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nconst encrypter_1 = require(\"./encrypter\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_logger_1 = require(\"./mongo_logger\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nfunction resolveSRVRecord(_x) {\n  return _resolveSRVRecord.apply(this, arguments);\n}\n\nfunction _resolveSRVRecord() {\n  _resolveSRVRecord = _asyncToGenerator(function* (options) {\n    if (typeof options.srvHost !== 'string') {\n      throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n\n    if (options.srvHost.split('.').length < 3) {\n      // TODO(NODE-3484): Replace with MongoConnectionStringError\n      throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n    } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n    const lookupAddress = options.srvHost;\n    const addresses = yield dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n\n    if (addresses.length === 0) {\n      throw new error_1.MongoAPIError('No addresses found at host');\n    }\n\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n      }\n    }\n\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true); // Resolve TXT record and add options from there if they exist.\n\n    let record;\n\n    try {\n      record = yield dns.promises.resolveTxt(lookupAddress);\n    } catch (error) {\n      if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n        throw error;\n      }\n\n      return hostAddresses;\n    }\n\n    if (record.length > 1) {\n      throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n      throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n      throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n    if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n      options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n      options.replicaSet = replicaSet;\n    }\n\n    if (loadBalanced === 'true') {\n      options.loadBalanced = true;\n    }\n\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n  });\n  return _resolveSRVRecord.apply(this, arguments);\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\n\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n\n    return true;\n  }\n\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n\n    return false;\n  }\n\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n\n  return parsedValue;\n}\n\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n\n}\n\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  } // validate BSONOptions\n\n\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null); // Feature flags\n\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null)); // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  } // All option collection\n\n\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValue = urlOptions.get(key);\n\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  } // Option parsing and setting\n\n\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n    }\n\n    if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n\n    mongoOptions.credentials.validate(); // Check if the only auth related option provided was authSource, if so we can remove credentials\n\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  } // Potential SRV Overrides and SRV connection string validations\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    } // SRV turns on TLS by default, but users can override and turn it off\n\n\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n  let loggerEnvOptions = {};\n  let loggerClientOptions = {};\n\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  mongoOptions.metadata = (0, utils_1.makeClientMetadata)(mongoOptions);\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n\n  return;\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n\n  },\n  authMechanism: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n\n      let source = options.credentials?.source;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values\n    }) {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!(0, utils_1.isRecord)(optionValue)) {\n            throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n          }\n\n          mechanismProperties = { ...optionValue\n          };\n        }\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n\n  },\n  authSource: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      return serverApiToValidate;\n    }\n\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n\n      return [...compressionList];\n    }\n\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getIntFromOptions(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  journal: {\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      const maxConnecting = getUIntFromOptions(name, value);\n\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n\n      return maxConnecting;\n    }\n\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      return { ...options.driverInfo,\n        name: String(value)\n      };\n    }\n\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n\n    transform({\n      values: [value]\n    }) {\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n          ...value\n        });\n      }\n\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n        level: level\n      });\n    }\n\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n      }\n\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n\n    transform({\n      values,\n      options\n    }) {\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        readPreferenceTags.push(readPreferenceTag);\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCRL: {\n    target: 'crl',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCert: {\n    target: 'cert',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslKey: {\n    target: 'key',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n\n  },\n  tlsCAFile: {\n    target: 'ca',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n\n  },\n  w: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  },\n  // MongoLogger\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\n  mongodbLogPath: {\n    type: 'any'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\n\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger')]);","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/connection_string.js"],"names":["Object","defineProperty","exports","value","FEATURE_FLAGS","DEFAULT_OPTIONS","OPTIONS","parseOptions","resolveSRVRecord","dns","require","fs","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","compression_1","encrypter_1","error_1","mongo_client_1","mongo_logger_1","read_concern_1","read_preference_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","options","srvHost","MongoAPIError","split","length","lookupAddress","addresses","promises","resolveSrv","srvServiceName","name","hostAddresses","map","r","HostAddress","fromString","port","validateLoadBalancedOptions","record","resolveTxt","error","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","checkTLSOptions","allOptions","check","a","b","TRUTHS","Set","FALSEHOODS","getBoolean","valueString","String","toLowerCase","emitWarningOnce","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","uri","mongoClient","MongoClient","useBigInt64","promoteLongs","promoteValues","url","default","hosts","isSRV","mongoOptions","create","flag","getOwnPropertySymbols","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","allKeys","objectOptionValue","push","urlValue","defaultOptionsValue","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","s","optionWord","isOrAre","descriptor","setOption","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","isOidc","MONGODB_OIDC","MongoMissingCredentialsError","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongoLoggerOptions","MongoLogger","resolveOptions","metadata","makeClientMetadata","isSrv","target","type","transform","deprecated","deprecatedMsg","emitWarning","isRecord","transformValue","appName","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","compressionList","compVal","compValArray","isArray","MongoInvalidArgumentError","c","Compressor","add","connectTimeoutMS","driverInfo","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","DEFAULT_PK_FACTORY","createPk","promoteBuffers","readConcern","ReadConcern","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n    const regex = /^.*?\\./;\n    const srv = `.${srvAddress.replace(regex, '')}`;\n    const parent = `.${parentDomain.replace(regex, '')}`;\n    return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        if (!matchesParentDomain(name, lookupAddress)) {\n            throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n        }\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Resolve TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await dns.promises.resolveTxt(lookupAddress);\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    const valueString = String(value).toLowerCase();\n    if (TRUTHS.has(valueString)) {\n        if (valueString !== 'true') {\n            (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n        }\n        return true;\n    }\n    if (FALSEHOODS.has(valueString)) {\n        if (valueString !== 'false') {\n            (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n        }\n        return false;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(':');\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = [...url.searchParams.getAll(key)];\n        if (values.includes('')) {\n            throw new error_1.MongoAPIError('URI cannot contain options with no value');\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allOptions = new CaseInsensitiveMap();\n    const allKeys = new Set([\n        ...urlOptions.keys(),\n        ...objectOptions.keys(),\n        ...exports.DEFAULT_OPTIONS.keys()\n    ]);\n    for (const key of allKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValue = urlOptions.get(key);\n        if (urlValue != null) {\n            values.push(...urlValue);\n        }\n        const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n        if (defaultOptionsValue != null) {\n            values.push(defaultOptionsValue);\n        }\n        allOptions.set(key, values);\n    }\n    if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n        allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n    }\n    if (allOptions.has('tls') || allOptions.has('ssl')) {\n        const tlsAndSslOpts = (allOptions.get('tls') || [])\n            .concat(allOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allOptions.get(key);\n        if (!values || values.length === 0)\n            continue;\n        setOption(mongoOptions, key, descriptor, values);\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, utils_1.makeClientMetadata)(mongoOptions);\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform, deprecated } = descriptor;\n    const name = target ?? key;\n    if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n    }\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    keepAlive: {\n        default: true,\n        type: 'boolean'\n    },\n    keepAliveInitialDelay: {\n        default: 120000,\n        type: 'uint'\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    sslCA: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCRL: {\n        target: 'crl',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCert: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslKey: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslPass: {\n        deprecated: true,\n        target: 'passphrase',\n        type: 'string'\n    },\n    sslValidate: {\n        target: 'rejectUnauthorized',\n        type: 'boolean'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateFile: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFile: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n    useNewUrlParser: { type: 'boolean' },\n    useUnifiedTopology: { type: 'boolean' },\n    // MongoLogger\n    // TODO(NODE-4849): Tighten the type of mongodbLogPath\n    mongodbLogPath: { type: 'any' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([\n    Symbol.for('@@mdb.skipPingOnConnect'),\n    Symbol.for('@@mdb.enableMongoLogger')\n]);\n"]},"metadata":{},"sourceType":"script"}