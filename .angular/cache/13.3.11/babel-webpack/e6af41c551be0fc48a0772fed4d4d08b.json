{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst count_1 = require(\"../operations/count\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst find_1 = require(\"../operations/find\");\n\nconst sort_1 = require(\"../sort\");\n\nconst utils_1 = require(\"../utils\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kFilter = Symbol('filter');\n/** @internal */\n\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\n\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\n\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace, filter = {}, options = {}) {\n    super(client, namespace, options);\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n  }\n\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      } // TODO: NODE-2882\n\n\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        this.close().finally(() => callback());\n        return;\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err); // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n\n\n  count(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n\n      if (typeof options === 'boolean') {\n        throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n      }\n\n      return (0, execute_operation_1.executeOperation)(_this.client, new count_1.CountOperation(_this.namespace, _this[kFilter], { ..._this[kBuiltOptions],\n        ..._this.cursorOptions,\n        ...options\n      }));\n    })();\n  }\n  /** Execute the explain for the cursor */\n\n\n  explain(verbosity) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return (0, execute_operation_1.executeOperation)(_this2.client, new find_1.FindOperation(undefined, _this2.namespace, _this2[kFilter], { ..._this2[kBuiltOptions],\n        ..._this2.cursorOptions,\n        explain: verbosity ?? true\n      }));\n    })();\n  }\n  /** Set the cursor query */\n\n\n  filter(filter) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n\n\n  hint(hint) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n\n\n  min(min) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n\n\n  max(max) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n\n\n  returnKey(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n\n\n  showRecordId(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n\n\n  addQueryModifier(name, value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    } // Strip of the $\n\n\n    const field = name.substr(1); // NOTE: consider some TS magic for this\n\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n        break;\n\n      case 'query':\n        this[kFilter] = value;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n\n\n  comment(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n\n\n  maxAwaitTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n\n\n  sort(sort, direction) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n\n\n  allowDiskUse(allow = true) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    } // As of 6.0 the default is true. This allows users to get back to the old behavior.\n\n\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n\n\n  collation(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n\n\n  limit(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n\n\n  skip(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n\n}\n\nexports.FindCursor = FindCursor;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cursor/find_cursor.js"],"names":["Object","defineProperty","exports","value","FindCursor","FLAGS","error_1","require","count_1","execute_operation_1","find_1","sort_1","utils_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","AbstractCursor","constructor","client","namespace","filter","options","sort","formatSort","clone","clonedOptions","mergeOptions","session","map","transform","_initialize","callback","findOperation","FindOperation","undefined","cursorOptions","executeOperation","err","response","cursor","firstBatch","length","documents","server","_getMore","batchSize","numReturned","limit","close","finally","nextBatch","count","emitWarningOnce","MongoInvalidArgumentError","CountOperation","explain","verbosity","assertUninitialized","hint","min","max","returnKey","showRecordId","addQueryModifier","name","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","MongoTailableCursorError","allowDiskUse","allow","collation","skip"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: We only need this for legacy queries that do not support `limit`, maybe\n            //       the value should only be saved in those cases.\n            if (response.cursor) {\n                this[kNumReturned] = response.cursor.firstBatch.length;\n            }\n            else {\n                this[kNumReturned] = response.documents ? response.documents.length : 0;\n            }\n            // TODO: NODE-2882\n            callback(undefined, { server: findOperation.server, session, response });\n        });\n    }\n    /** @internal */\n    _getMore(batchSize, callback) {\n        // NOTE: this is to support client provided limits in pre-command servers\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                this.close().finally(() => callback());\n                return;\n            }\n        }\n        super._getMore(batchSize, (err, response) => {\n            if (err)\n                return callback(err);\n            // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n            if (response) {\n                this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n            }\n            callback(undefined, response);\n        });\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n"]},"metadata":{},"sourceType":"script"}