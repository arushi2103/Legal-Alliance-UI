{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.commandDocument = exports.ServiceWorkflow = void 0;\n\nconst bson_1 = require(\"bson\");\n\nconst utils_1 = require(\"../../../utils\");\n\nconst providers_1 = require(\"../providers\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\n\n\nclass ServiceWorkflow {\n  /**\n   * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n   * and then attempts to read the token from that path.\n   */\n  execute(connection, credentials) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this.getToken();\n      const command = commandDocument(token);\n      return connection.commandAsync((0, utils_1.ns)(credentials.source), command, undefined);\n    })();\n  }\n  /**\n   * Get the document to add for speculative authentication.\n   */\n\n\n  speculativeAuth() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this2.getToken();\n      return {\n        speculativeAuthenticate: commandDocument(token)\n      };\n    })();\n  }\n\n}\n\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\n\nfunction commandDocument(token) {\n  return {\n    saslStart: 1,\n    mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n    payload: bson_1.BSON.serialize({\n      jwt: token\n    })\n  };\n}\n\nexports.commandDocument = commandDocument;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js"],"names":["Object","defineProperty","exports","value","commandDocument","ServiceWorkflow","bson_1","require","utils_1","providers_1","execute","connection","credentials","token","getToken","command","commandAsync","ns","source","undefined","speculativeAuth","speculativeAuthenticate","saslStart","mechanism","AuthMechanism","MONGODB_OIDC","payload","BSON","serialize","jwt"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0BF,OAAO,CAACG,eAAR,GAA0B,KAAK,CAAzD;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;AACA;AACA;AACA;AACA;;;AACA,MAAMF,eAAN,CAAsB;AAClB;AACJ;AACA;AACA;AACUK,EAAAA,OAAO,CAACC,UAAD,EAAaC,WAAb,EAA0B;AAAA;;AAAA;AACnC,YAAMC,KAAK,SAAS,KAAI,CAACC,QAAL,EAApB;AACA,YAAMC,OAAO,GAAGX,eAAe,CAACS,KAAD,CAA/B;AACA,aAAOF,UAAU,CAACK,YAAX,CAAwB,CAAC,GAAGR,OAAO,CAACS,EAAZ,EAAgBL,WAAW,CAACM,MAA5B,CAAxB,EAA6DH,OAA7D,EAAsEI,SAAtE,CAAP;AAHmC;AAItC;AACD;AACJ;AACA;;;AACUC,EAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB,YAAMP,KAAK,SAAS,MAAI,CAACC,QAAL,EAApB;AACA,aAAO;AAAEO,QAAAA,uBAAuB,EAAEjB,eAAe,CAACS,KAAD;AAA1C,OAAP;AAFoB;AAGvB;;AAhBiB;;AAkBtBX,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA;AACA;AACA;;AACA,SAASD,eAAT,CAAyBS,KAAzB,EAAgC;AAC5B,SAAO;AACHS,IAAAA,SAAS,EAAE,CADR;AAEHC,IAAAA,SAAS,EAAEd,WAAW,CAACe,aAAZ,CAA0BC,YAFlC;AAGHC,IAAAA,OAAO,EAAEpB,MAAM,CAACqB,IAAP,CAAYC,SAAZ,CAAsB;AAAEC,MAAAA,GAAG,EAAEhB;AAAP,KAAtB;AAHN,GAAP;AAKH;;AACDX,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = require(\"bson\");\nconst utils_1 = require(\"../../../utils\");\nconst providers_1 = require(\"../providers\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nclass ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getToken();\n        const command = commandDocument(token);\n        return connection.commandAsync((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth() {\n        const token = await this.getToken();\n        return { speculativeAuthenticate: commandDocument(token) };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\nfunction commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({ jwt: token })\n    };\n}\nexports.commandDocument = commandDocument;\n"]},"metadata":{},"sourceType":"script"}