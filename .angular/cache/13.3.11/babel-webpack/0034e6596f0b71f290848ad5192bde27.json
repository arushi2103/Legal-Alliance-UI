{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"D:\\\\dev-projects\\\\APEX\\\\Legalalliance\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthProvider = exports.AuthContext = void 0;\n\nconst error_1 = require(\"../../error\");\n/**\n * Context used during authentication\n * @internal\n */\n\n\nclass AuthContext {\n  constructor(connection, credentials, options) {\n    /** If the context is for reauthentication. */\n    this.reauthenticating = false;\n    this.connection = connection;\n    this.credentials = credentials;\n    this.options = options;\n  }\n\n}\n\nexports.AuthContext = AuthContext;\n\nclass AuthProvider {\n  /**\n   * Prepare the handshake document before the initial handshake.\n   *\n   * @param handshakeDoc - The document used for the initial handshake on a connection\n   * @param authContext - Context for authentication flow\n   */\n  prepare(handshakeDoc, _authContext) {\n    return _asyncToGenerator(function* () {\n      return handshakeDoc;\n    })();\n  }\n  /**\n   * Reauthenticate.\n   * @param context - The shared auth context.\n   */\n\n\n  reauth(context) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (context.reauthenticating) {\n        throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n      }\n\n      try {\n        context.reauthenticating = true;\n        yield _this.auth(context);\n      } finally {\n        context.reauthenticating = false;\n      }\n    })();\n  }\n\n}\n\nexports.AuthProvider = AuthProvider;","map":{"version":3,"sources":["D:/dev-projects/APEX/Legalalliance/node_modules/mongodb/lib/cmap/auth/auth_provider.js"],"names":["Object","defineProperty","exports","value","AuthProvider","AuthContext","error_1","require","constructor","connection","credentials","options","reauthenticating","prepare","handshakeDoc","_authContext","reauth","context","MongoRuntimeError","auth"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,WAAR,GAAsB,KAAK,CAAlD;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;AACA;AACA;AACA;AACA;;;AACA,MAAMF,WAAN,CAAkB;AACdG,EAAAA,WAAW,CAACC,UAAD,EAAaC,WAAb,EAA0BC,OAA1B,EAAmC;AAC1C;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AAPa;;AASlBT,OAAO,CAACG,WAAR,GAAsBA,WAAtB;;AACA,MAAMD,YAAN,CAAmB;AACf;AACJ;AACA;AACA;AACA;AACA;AACUS,EAAAA,OAAO,CAACC,YAAD,EAAeC,YAAf,EAA6B;AAAA;AACtC,aAAOD,YAAP;AADsC;AAEzC;AACD;AACJ;AACA;AACA;;;AACUE,EAAAA,MAAM,CAACC,OAAD,EAAU;AAAA;;AAAA;AAClB,UAAIA,OAAO,CAACL,gBAAZ,EAA8B;AAC1B,cAAM,IAAIN,OAAO,CAACY,iBAAZ,CAA8B,uCAA9B,CAAN;AACH;;AACD,UAAI;AACAD,QAAAA,OAAO,CAACL,gBAAR,GAA2B,IAA3B;AACA,cAAM,KAAI,CAACO,IAAL,CAAUF,OAAV,CAAN;AACH,OAHD,SAIQ;AACJA,QAAAA,OAAO,CAACL,gBAAR,GAA2B,KAA3B;AACH;AAViB;AAWrB;;AAzBc;;AA2BnBV,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = require(\"../../error\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n"]},"metadata":{},"sourceType":"script"}